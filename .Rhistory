eta = eta,
min_child_weight = min_child_weight,
max_depth = max_depth,
gamma = gamma,
max_delta_step = max_delta_step,
subsample = subsample,
colsample_bytree = colsample_bytree,
colsample_bylevel = colsample_bylevel)
callingOrder <- sample(nrow(paramTable))
resultList <- list()
lastSavedTime <- 0
for (paramIndex in callingOrder){
iterParams <- paramTable[paramIndex, ]
params <- list(booster = iterParams$booster,
objective = iterParams$objective,
silent = iterParams$silent,
nthread = iterParams$nthread,
eta = iterParams$eta,
gamma= iterParams$gamma,
max_depth = iterParams$max_depth,
min_child_weight = iterParams$min_child_weight,
subsample = iterParams$subsample,
colsample_bytree = iterParams$colsample_bytree,
print_every_n = iterParams$print_every_n,
max_delta_step = iterParams$max_delta_step,
colsample_bylevel = colsample_bylevel )
cv <- xgb.cv(params = params,
data = trainData,
nrounds = iterParams$nrounds,
nfold = iterParams$nfold,
metrics = iterParams$metrics,
early_stopping_rounds = iterParams$early_stopping_rounds,
maximize = FALSE)
lastIter <- cv$niter
endTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[lastIter]
endTrainRMSEStd <- cv$evaluation_log$train_rmse_std[lastIter]
endTestRMSEMean <-cv$evaluation_log$test_rmse_mean[lastIter]
endTestRMSEStd <- cv$evaluation_log$test_rmse_std[lastIter]
bestIter <- cv$best_iteration
bestNTrees <- cv$best_ntreelimit
bestTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[bestIter]
bestTrainRMSEStd <- cv$evaluation_log$train_rmse_std[bestIter]
bestTestRMSEMean <-cv$evaluation_log$test_rmse_mean[bestIter]
bestTestRMSEStd <- cv$evaluation_log$test_rmse_std[bestIter]
result <- list(params = params,
lastIterList = list( lastIter = lastIter,
endTrainRMSEMean = endTrainRMSEMean,
endTrainRMSEStd = endTrainRMSEStd,
endTestRMSEMean = endTestRMSEMean,
endTestRMSEStd = endTestRMSEStd ),
bestIterList = list( bestIter = bestIter,
bestNTrees = bestNTrees,
bestTrainRMSEMean = bestTrainRMSEMean,
bestTrainRMSEStd = bestTrainRMSEStd,
bestTestRMSEMean = bestTestRMSEMean,
bestTestRMSEStd = bestTestRMSEStd)
)
resultList <- append(resultList, result)
if ( (as.numeric(Sys.time()) - lastSavedTime) > SAVE_EACH_MINS ){
save(resultList, file = paste('data/resultList_', TS, '.RDA', sep = ''))
}
}
source('xgboostPreparation.R')
TS <- as.numeric(Sys.time())
set.seed(TS)
SAVE_EACH_MINS <- 30
booster <- 'gbtree'
nrounds <- 10000
print_every_n <- 100
early_stopping_rounds <- 500
nfold <- 30
objective <- "reg:linear"
metrics <- "rmse"
silent <- 0
nthread <- 6
eta <- c(0.1, 0.05, 0.01)
min_child_weight <- c(2, 5, 10)
max_depth <- c(2, 4, 6)
gamma <- c(0, 2)
max_delta_step <- c(0)
subsample <- c(0.5, 0.75, 1)
colsample_bytree <- c(0.5, 0.75, 1)
colsample_bylevel <- c(0.5, 0.75, 1)
paramTable <- expand.grid(booster = booster,
nrounds = nrounds,
print_every_n = print_every_n,
early_stopping_rounds = early_stopping_rounds,
nfold = nfold,
objective = objective,
metrics = metrics,
silent = silent,
nthread = nthread,
eta = eta,
min_child_weight = min_child_weight,
max_depth = max_depth,
gamma = gamma,
max_delta_step = max_delta_step,
subsample = subsample,
colsample_bytree = colsample_bytree,
colsample_bylevel = colsample_bylevel)
callingOrder <- sample(nrow(paramTable))
resultList <- list()
lastSavedTime <- 0
for (paramIndex in callingOrder){
iterParams <- paramTable[paramIndex, ]
params <- list(booster = iterParams$booster,
objective = iterParams$objective,
silent = iterParams$silent,
nthread = iterParams$nthread,
eta = iterParams$eta,
gamma= iterParams$gamma,
max_depth = iterParams$max_depth,
min_child_weight = iterParams$min_child_weight,
subsample = iterParams$subsample,
colsample_bytree = iterParams$colsample_bytree,
print_every_n = iterParams$print_every_n,
max_delta_step = iterParams$max_delta_step,
colsample_bylevel = colsample_bylevel )
cv <- xgb.cv(params = params,
data = trainData,
nrounds = iterParams$nrounds,
nfold = iterParams$nfold,
metrics = iterParams$metrics,
early_stopping_rounds = iterParams$early_stopping_rounds,
maximize = FALSE)
lastIter <- cv$niter
endTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[lastIter]
endTrainRMSEStd <- cv$evaluation_log$train_rmse_std[lastIter]
endTestRMSEMean <-cv$evaluation_log$test_rmse_mean[lastIter]
endTestRMSEStd <- cv$evaluation_log$test_rmse_std[lastIter]
bestIter <- cv$best_iteration
bestNTrees <- cv$best_ntreelimit
bestTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[bestIter]
bestTrainRMSEStd <- cv$evaluation_log$train_rmse_std[bestIter]
bestTestRMSEMean <-cv$evaluation_log$test_rmse_mean[bestIter]
bestTestRMSEStd <- cv$evaluation_log$test_rmse_std[bestIter]
result <- list(params = params,
lastIterList = list( lastIter = lastIter,
endTrainRMSEMean = endTrainRMSEMean,
endTrainRMSEStd = endTrainRMSEStd,
endTestRMSEMean = endTestRMSEMean,
endTestRMSEStd = endTestRMSEStd ),
bestIterList = list( bestIter = bestIter,
bestNTrees = bestNTrees,
bestTrainRMSEMean = bestTrainRMSEMean,
bestTrainRMSEStd = bestTrainRMSEStd,
bestTestRMSEMean = bestTestRMSEMean,
bestTestRMSEStd = bestTestRMSEStd)
)
resultList <- append(resultList, result)
if ( (as.numeric(Sys.time()) - lastSavedTime) > SAVE_EACH_MINS ){
save(resultList, file = paste('data/resultList_', TS, '.RDA', sep = ''))
}
}
source('xgboostPreparation.R')
TS <- as.numeric(Sys.time())
set.seed(TS)
SAVE_EACH_MINS <- 30
booster <- 'gbtree'
nrounds <- 10000
print_every_n <- 100
early_stopping_rounds <- 500
nfold <- 30
objective <- "reg:linear"
metrics <- "rmse"
silent <- 0
nthread <- 6
eta <- c(0.1, 0.05, 0.01)
min_child_weight <- c(2, 5, 10)
max_depth <- c(2, 4, 6)
gamma <- c(0, 2)
max_delta_step <- c(0)
subsample <- c(0.5, 0.75, 1)
colsample_bytree <- c(0.5, 0.75, 1)
colsample_bylevel <- c(0.5, 0.75, 1)
paramTable <- expand.grid(booster = booster,
nrounds = nrounds,
print_every_n = print_every_n,
early_stopping_rounds = early_stopping_rounds,
nfold = nfold,
objective = objective,
metrics = metrics,
silent = silent,
nthread = nthread,
eta = eta,
min_child_weight = min_child_weight,
max_depth = max_depth,
gamma = gamma,
max_delta_step = max_delta_step,
subsample = subsample,
colsample_bytree = colsample_bytree,
colsample_bylevel = colsample_bylevel)
callingOrder <- sample(nrow(paramTable))
resultList <- list()
lastSavedTime <- 0
for (paramIndex in callingOrder){
iterParams <- paramTable[paramIndex, ]
params <- list(booster = iterParams$booster,
objective = iterParams$objective,
silent = iterParams$silent,
nthread = iterParams$nthread,
eta = iterParams$eta,
gamma= iterParams$gamma,
max_depth = iterParams$max_depth,
min_child_weight = iterParams$min_child_weight,
subsample = iterParams$subsample,
colsample_bytree = iterParams$colsample_bytree,
print_every_n = iterParams$print_every_n,
max_delta_step = iterParams$max_delta_step,
colsample_bylevel = colsample_bylevel )
cv <- xgb.cv(params = params,
data = trainData,
nrounds = iterParams$nrounds,
nfold = iterParams$nfold,
metrics = iterParams$metrics,
early_stopping_rounds = iterParams$early_stopping_rounds,
maximize = FALSE)
lastIter <- cv$niter
endTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[lastIter]
endTrainRMSEStd <- cv$evaluation_log$train_rmse_std[lastIter]
endTestRMSEMean <-cv$evaluation_log$test_rmse_mean[lastIter]
endTestRMSEStd <- cv$evaluation_log$test_rmse_std[lastIter]
bestIter <- cv$best_iteration
bestNTrees <- cv$best_ntreelimit
bestTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[bestIter]
bestTrainRMSEStd <- cv$evaluation_log$train_rmse_std[bestIter]
bestTestRMSEMean <-cv$evaluation_log$test_rmse_mean[bestIter]
bestTestRMSEStd <- cv$evaluation_log$test_rmse_std[bestIter]
result <- list(params = params,
lastIterList = list( lastIter = lastIter,
endTrainRMSEMean = endTrainRMSEMean,
endTrainRMSEStd = endTrainRMSEStd,
endTestRMSEMean = endTestRMSEMean,
endTestRMSEStd = endTestRMSEStd ),
bestIterList = list( bestIter = bestIter,
bestNTrees = bestNTrees,
bestTrainRMSEMean = bestTrainRMSEMean,
bestTrainRMSEStd = bestTrainRMSEStd,
bestTestRMSEMean = bestTestRMSEMean,
bestTestRMSEStd = bestTestRMSEStd)
)
resultList <- append(resultList, result)
if ( (as.numeric(Sys.time()) - lastSavedTime) > SAVE_EACH_MINS ){
save(resultList, file = paste('data/resultList_', TS, '.RDA', sep = ''))
}
}
DataFiles <- dir(path = './data/', pattern = '.RDA')
finalResultList <- list()
for(file in DataFiles){
fileName <- paste('data/', file, sep = '')
load(file = fileName)
finalResultList <- append(finalResultList, resultList)
}
numIters <- ( length(finalResultList) / 3 ) - 1
allBestResults <- data.frame()
booster <- finalResultList[[1]]
lastResult <- finalResultList[[2]]
bestResult <- finalResultList[[3]]
auxAllBestResults <- as.matrix(unlist(bestResult))
auxAllBestResults <- data.frame(t(auxAllBestResults))
auxAllBestResults <- cbind(iter = 0,
auxAllBestResults)
allBestResults <- auxAllBestResults
for(i in 1:numIters){
booster <- finalResultList[[i*3 + 1]]
lastResult <- finalResultList[[i*3 + 2]]
bestResult <- finalResultList[[i*3 + 3]]
auxAllBestResults <- as.matrix(unlist(bestResult))
auxAllBestResults <- data.frame(t(auxAllBestResults))
auxAllBestResults <- cbind(iter = i,
auxAllBestResults)
allBestResults[i, 1:ncol(allBestResults)] <- auxAllBestResults
}
DataFiles <- c('resultList_1498503517.74301.RDA', 'data/resultList_1498498363.08413.RDA')
finalResultList <- list()
for(file in DataFiles){
fileName <- paste('data/', file, sep = '')
load(file = fileName)
finalResultList <- append(finalResultList, resultList)
}
numIters <- ( length(finalResultList) / 3 ) - 1
allBestResults <- data.frame()
booster <- finalResultList[[1]]
lastResult <- finalResultList[[2]]
bestResult <- finalResultList[[3]]
auxAllBestResults <- as.matrix(unlist(bestResult))
auxAllBestResults <- data.frame(t(auxAllBestResults))
auxAllBestResults <- cbind(iter = 0,
auxAllBestResults)
allBestResults <- auxAllBestResults
for(i in 1:numIters){
booster <- finalResultList[[i*3 + 1]]
lastResult <- finalResultList[[i*3 + 2]]
bestResult <- finalResultList[[i*3 + 3]]
auxAllBestResults <- as.matrix(unlist(bestResult))
auxAllBestResults <- data.frame(t(auxAllBestResults))
auxAllBestResults <- cbind(iter = i,
auxAllBestResults)
allBestResults[i, 1:ncol(allBestResults)] <- auxAllBestResults
}
bestIter <- which.min(allBestResults$bestTestRMSEMean)
booster <- finalResultList[[bestIter*3 + 1]]
lastResult <- finalResultList[[bestIter*3 + 2]]
bestResult <- finalResultList[[bestIter*3 + 3]]
require('xgboost')
source('xgboostPreparation.R')
params <- list(booster = booster$booster,
objective = booster$objective,
silent = booster$silent,
nthread = 20,
eta = booster$eta,
gamma= booster$gamma,
max_depth = booster$max_depth,
min_child_weight = booster$min_child_weight,
subsample = booster$subsample,
colsample_bytree = booster$colsample_bytree,
print_every_n = booster$print_every_n,
max_delta_step = booster$max_delta_step )
model <- xgb.train( params = params,
data = trainData,
nrounds = 7500,
metrics = "RMSE",
maximize = FALSE)
results
bestResult
DataFiles <- dir(path = './data/', pattern = '.RDA')
finalResultList <- list()
for(file in DataFiles){
fileName <- paste('data/', file, sep = '')
load(file = fileName)
finalResultList <- append(finalResultList, resultList)
}
numIters <- ( length(finalResultList) / 3 ) - 1
allBestResults <- data.frame()
booster <- finalResultList[[1]]
lastResult <- finalResultList[[2]]
bestResult <- finalResultList[[3]]
auxAllBestResults <- as.matrix(unlist(bestResult))
auxAllBestResults <- data.frame(t(auxAllBestResults))
auxAllBestResults <- cbind(iter = 0,
auxAllBestResults)
allBestResults <- auxAllBestResults
for(i in 1:numIters){
booster <- finalResultList[[i*3 + 1]]
lastResult <- finalResultList[[i*3 + 2]]
bestResult <- finalResultList[[i*3 + 3]]
auxAllBestResults <- as.matrix(unlist(bestResult))
auxAllBestResults <- data.frame(t(auxAllBestResults))
auxAllBestResults <- cbind(iter = i,
auxAllBestResults)
allBestResults[i, 1:ncol(allBestResults)] <- auxAllBestResults
}
bestIter <- which.min(allBestResults$bestTestRMSEMean)
booster <- finalResultList[[bestIter*3 + 1]]
lastResult <- finalResultList[[bestIter*3 + 2]]
bestResult <- finalResultList[[bestIter*3 + 3]]
require('xgboost')
source('xgboostPreparation.R')
params <- list(booster = booster$booster,
objective = booster$objective,
silent = booster$silent,
nthread = 20,
eta = booster$eta,
gamma= booster$gamma,
max_depth = booster$max_depth,
min_child_weight = booster$min_child_weight,
subsample = booster$subsample,
colsample_bytree = booster$colsample_bytree,
print_every_n = booster$print_every_n,
max_delta_step = booster$max_delta_step )
model <- xgb.train( params = params,
data = trainData,
nrounds = 1000,
metrics = "RMSE",
maximize = FALSE)
results <- predict(model, testData)
SampleSubmission <- readr::read_csv(file = './data/SampleSubmission.csv')
SampleSubmission$Target <- results
write.csv(x = SampleSubmission, 'results.csv', row.names = FALSE)
iris
require('dplyr')
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = round(Species) )
Data
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = round(Species) )
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
Data
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species ) %>%
dplyr::select(destinoX, destinoY, valor)
Data %>%
dplyr::group_by(destinoX, destinoY, valor)
Data %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1)
Data %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup() %>%
dplyr::add_rownames()
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
Data %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup() %>%
dplyr::add_rownames()
Data %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup()
Data %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1)
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
Data
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
ClusterTable <- Data %>%
dplyr::select(destinoX, destinoY, valor) %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup()
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
ClusterTable <- Data %>%
dplyr::select(destinoX, destinoY, valor) %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup() %>%
dplyr::add_rownames()
ClusterTable
?transmute
?rename
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
ClusterTable <- Data %>%
dplyr::select(destinoX, destinoY, valor) %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup() %>%
dplyr::add_rownames() %>%
dplyr::rename(ClusterID = 'rowname')
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
ClusterTable <- Data %>%
dplyr::select(destinoX, destinoY, valor) %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup() %>%
dplyr::add_rownames() %>%
dplyr::rename(ClusterID = rowname)
ClusterTable
?left_join
dim(ClusterTable)
dim(ClusterTable)
head(ClusterTable)
require('dplyr')
Data <- iris %>%
dplyr::mutate(destinoX = round(Sepal.Length),
destinoY = round(Sepal.Width),
valor = Species )
### Cria uma tabela de Clusters
ClusterTable <- Data %>%
dplyr::select(destinoX, destinoY, valor) %>%
dplyr::group_by(destinoX, destinoY, valor) %>%
dplyr::filter(row_number(destinoX) == 1) %>%
dplyr::ungroup() %>%
dplyr::add_rownames() %>%
dplyr::rename(ClusterID = rowname)
### Coloca a 7 coluna que vc queria no Data original
NewData <- Data %>%
dplyr::left_join(ClusterTable, by = c( "destinoX" = "destinoX",
"destinoY" = "destinoY",
"valor" = "valor" )
)
NewData
NewData
length(unique(Data$valor)) / nrow(Data)
