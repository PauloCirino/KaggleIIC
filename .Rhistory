p
head(XTrain)
View(XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = ( Val - min(Val) ) / ( max(Val) - min(Val) ) ) %>%
dplyr::ungroup() )
p <- XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = ( Val - min(Val) ) / ( max(Val) - min(Val) ) ) %>%
dplyr::ungroup() %>%
data.frame() %>%
ggplot2::ggplot(aes(x = Var, y = Val)) +
ggplot2::geom_boxplot()
p
p <- XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = ( Val - min(Val) ) / ( max(Val) - min(Val) ) ) %>%
dplyr::ungroup() %>%
data.frame() %>%
ggplot2::ggplot(aes(x = Var, y = Val)) +
ggplot2::geom_boxplot() +
ggplot2::coord_flip()
p
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.align = 'center')
# Chunk 2: packageLoading
### Reading Data
require('readr')
### Data Wrangling
require('dplyr')
require('tidyr')
require('DMwR') ## KNN Imputation
### Visualization
require('ggplot2')
require('Amelia')
require('plotly')
# Chunk 3: dataReading
train <- read_csv("./data/train.csv")
IdTrain <- train$Id
YTrain <- train$Target
XTrain <- train %>% dplyr::select(-Id, -Target)
test <- read_csv("./data/test.csv")
IdTest <- test$Id
XTest <- test %>% dplyr::select(-Id)
# Chunk 4: dataFirstViewInput
XTrain %>% dplyr::glimpse()
XTrain %>% summary()
# Chunk 5: dataFirstViewOutput
YTrain %>% summary()
plotly::plot_ly(x = YTrain) %>%
plotly::add_histogram()
plotly::plot_ly(y = YTrain, type = "box", boxpoints = "all", jitter = 0.5,
pointpos = -1.8)
plotly::plot_ly(x = 1:length(YTrain), y = sort(YTrain)) %>%
plotly::add_lines() %>%
plotly::add_markers()
# Chunk 6
trainMissingData <- XTrain %>%
dplyr::mutate_all(is.na) %>%
dplyr::summarise_all(dplyr::funs(sum)) %>%
tidyr::gather(Var, NaCountTrain) %>%
dplyr::arrange(dplyr::desc(NaCountTrain)) %>%
dplyr::filter(NaCountTrain > 0)
testMissingData <- XTest %>%
dplyr::mutate_all(is.na) %>%
dplyr::summarise_all(sum) %>%
tidyr::gather(Var, NaCountTest) %>%
dplyr::arrange(dplyr::desc(NaCountTest)) %>%
dplyr::filter(NaCountTest > 0)
nTrainningObs <- nrow(XTrain)
nTestObs <- nrow(XTest)
missingResultTable <- trainMissingData %>%
dplyr::full_join(testMissingData, by = 'Var') %>%
dplyr::mutate(NaCountTrainPerc = 100 * round(NaCountTrain / nTrainningObs, 4),
NaCountTestPerc = 100 * round(NaCountTest / nTestObs, 4))
missingResultTable
# Chunk 7: vizMissingData
missingDataColNames <- missingResultTable$Var
XTrain %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
data.frame() %>%
Amelia::missmap(col = c("black", "grey"))
XTest %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
data.frame() %>%
Amelia::missmap(col = c("black", "grey"))
# Chunk 8: vizMissingData2
missingDataColNames <- missingResultTable$Var[1:6]
p <- XTrain %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
tidyr::gather(Var, Val) %>%
dplyr::filter(!is.na(Val)) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = (Val - mean(Val))/sd(Val) ) %>%
dplyr::ungroup() %>%
ggplot2::ggplot(aes(x = Var, fill = Var, color = Var, y = Val))
plotly::ggplotly(p + ggplot2::geom_boxplot())
plotly::ggplotly(p + ggplot2::geom_point())
p <- XTest %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
tidyr::gather(Var, Val) %>%
dplyr::filter(!is.na(Val)) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = (Val - mean(Val))/sd(Val) ) %>%
dplyr::ungroup() %>%
ggplot2::ggplot(aes(x = Var, fill = Var, color = Var, y = Val))
plotly::ggplotly(p + ggplot2::geom_boxplot())
plotly::ggplotly(p + ggplot2::geom_point())
# Chunk 9
NAToZeroVars <- missingResultTable %>%
dplyr::filter(NaCountTrainPerc > 20.0) %>%
dplyr::select(Var) %>%
unlist() %>% as.character()
NNImputationVars <- missingResultTable %>%
dplyr::filter(NaCountTrainPerc < 20.0) %>%
dplyr::select(Var) %>%
unlist() %>% as.character()
preProcessNAs <- function(Data, NAToZeroVars, NNImputationVars){
auxColNames <- names(Data) %>% base::setdiff( c(NAToZeroVars, NNImputationVars ) )
auxData <- Data %>%
dplyr::select_( .dots = auxColNames )
NAToZeroData <- Data %>%
dplyr::select_(.dots = NAToZeroVars) %>%
dplyr::mutate_all( dplyr::funs( ifelse(is.na(.), 0, .) )
)
NNImputationData <- Data %>%
dplyr::select_(.dots = NNImputationVars) %>%
data.frame() %>%
DMwR::knnImputation(k = 10)
dplyr::bind_cols(auxData, NAToZeroData, NNImputationData) %>%
data.frame()
}
XTrain <- XTrain %>%
preProcessNAs(NAToZeroVars = NAToZeroVars, NNImputationVars = NNImputationVars)
XTest <- XTest %>%
preProcessNAs(NAToZeroVars = NAToZeroVars, NNImputationVars = NNImputationVars)
# Chunk 10
p <- XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = ( Val - min(Val) ) / ( max(Val) - min(Val) ) ) %>%
dplyr::ungroup() %>%
data.frame() %>%
ggplot2::ggplot(aes(x = Var, y = Val)) +
ggplot2::geom_point()
p
# Chunk 11
XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
unique() %>%
dplyr::group_by(Var) %>%
dplyr::summarise(UniqueValuesCount = n()) %>%
dplyr::arrange(UniqueValuesCount) %>%
data.frame()
# Chunk 12
XTrain <- XTrain %>% dplyr::select(-V37)
XTest <- XTest %>% dplyr::select(-V37)
p <- XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = ( Val - min(Val) ) / ( max(Val) - min(Val) ) ) %>%
dplyr::ungroup() %>%
data.frame() %>%
ggplot2::ggplot(aes(x = Var, y = Val)) +
ggplot2::geom_boxplot() +
ggplot2::coord_flip()
plotly::ggplotly(p = p)
p
ggplotly
ggplotly()
Data <- XTrain
Data %>%
dplyr::mutate_all( dplyr::funs( ( . - min(.) ) / ( max(.) - min(.) ) ) )
?car
plot(rnorm(100))
hist(rnorm(100))
hist(rnorm(1000))
hist(rnorm(10000))
hist(log(rnorm(10000)))
preProcessScaleAndCenter <- function(Data){
Data %>%
dplyr::mutate_all( dplyr::funs( ( . - min(.) ) / ( max(.) - min(.) ) ) )
}
XTrain <- XTrain %>% preProcessScaleAndCenter()
XTest <- XTest %>% preProcessScaleAndCenter()
p
?pca
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
hist(log(iris$Petal.Width))
hist(log(iris$Petal.Length))
hist(log(iris$Sepal.Width))
?prcomp
View(XTrain %>% data.matrix())
type(XTrain %>% data.matrix())
class(XTrain %>% data.matrix())
class(XTrain %>% data.matrix()[1,1])
class(XTrain %>% data.matrix())
class((XTrain %>% data.matrix())[1,1])
PCAModel <- prcomp(x = XTrain %>% data.matrix())
PCAModel
re(graphics)
## the variances of the variables in the
## USArrests data vary by orders of magnitude, so scaling is appropriate
prcomp(USArrests)  # inappropriate
prcomp(USArrests, scale = TRUE)
prcomp(~ Murder + Assault + Rape, data = USArrests, scale = TRUE)
plot(prcomp(USArrests))
summary(prcomp(USArrests, scale = TRUE))
biplot(prcomp(USArrests, scale = TRUE))
summary(PCAModel)
PCAModel <- prcomp(x = XTrain %>% data.matrix())
summary(PCAModel)
class(summary(PCAModel))
data.frame(summary(PCAModel))
as.data.frame(summary(PCAModel))
as.matrix(summary(PCAModel))
as.character(summary(PCAModel))
foo <- summary(PCAModel)
foo$importance
summary(PCAModel)
foo$importanceplot(PCAModel)
plot(PCAModel)
biplot(PCAModel)
PCASummary <- summary(PCAModel)
PCASummary$importance
class(PCASummary$importance)
PCASummary <- summary(PCAModel)$importance
PCASummary
summary(PCAModel)$importance %>%
data.frame()
View(summary(PCAModel)$importance %>%
data.frame())
summary(PCAModel)$importance %>%
t() %>%
data.frame()
PCAModel <- prcomp(x = XTrain %>% data.matrix())
auxPCAData <- summary(PCAModel)$importance %>%
t() %>%
data.frame()
summary(PCAModel)$importance %>%
t() %>%
data.frame() %>%
dplyr::add_rownames()
summary(PCAModel)$importance %>%
t() %>%
data.frame() %>%
tibble::rownames_to_column()
require('tibble')
auxPCAData
colnames()
PCAModel <- prcomp(x = XTrain %>% data.matrix())
auxPCAData <- summary(PCAModel)$importance %>%
t() %>%
data.frame() %>%
tibble::rownames_to_column(var = "Component")
auxPCAData
?geom_bar
auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Standard.deviation)) +
ggplot2::geom_bar(stat = 'identity')
names(auxPCAData)
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Standard.deviation)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Proportion.of.Variance)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Cumulative.Proportion)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
summary(PCAModel)$importance %>%
t() %>%
data.frame() %>%
tibble::rownames_to_column(var = "Component")
Component %>% as.character()
PCAModel <- prcomp(x = XTrain %>% data.matrix())
auxPCAData <- summary(PCAModel)$importance %>%
t() %>%
data.frame() %>%
tibble::rownames_to_column(var = "Component") %>%
dplyr::mutate(Component = factor(x = Component,
levels = Component %>% as.character()))
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Standard.deviation)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Proportion.of.Variance)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Cumulative.Proportion)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
?prcomp
predict(object = PCAModel, Data)
predict(object = Data, PCAModel)
predict(object = PCAModel, Data)
predict(object = PCAModel, newdata = Data)
### pca - calculated for the first 4 columns of the data set that correspond to biometric measurements ("Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width")
data(iris)
# split data into 2 parts for pca training (75%) and prediction (25%)
set.seed(1)
samp <- sample(nrow(iris), nrow(iris)*0.75)
iris.train <- iris[samp,]
iris.valid <- iris[-samp,]
# conduct PCA on training dataset
pca <- prcomp(iris.train[,1:4], retx=TRUE, center=TRUE, scale=TRUE)
expl.var <- round(pca$sdev^2/sum(pca$sdev^2)*100) # percent explained variance
# prediction of PCs for validation dataset
pred <- predict(pca, newdata=iris.valid[,1:4])
pred
dim(pred)
Data
dim(Data)
dim(predict(object = PCAModel, newdata = Data))
dim(predict(object = PCAModel, newdata = Data))
predict(object = PCAModel, newdata = Data)
nComponents =40
predict(object = PCAModel, newdata = Data) %>%
dplyr::select(1:nComponents)
predict(object = PCAModel, newdata = Data) %>%
data.frame() %>%
dplyr::select(1:nComponents)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.align = 'center')
# Chunk 2: packageLoading
### Reading Data
require('readr')
### Data Wrangling
require('dplyr')
require('tidyr')
require('tibble')
require('DMwR') ## KNN Imputation
### Visualization
require('ggplot2')
require('Amelia')
require('plotly')
# Chunk 3: dataReading
train <- read_csv("./data/train.csv")
IdTrain <- train$Id
YTrain <- train$Target
XTrain <- train %>% dplyr::select(-Id, -Target)
test <- read_csv("./data/test.csv")
IdTest <- test$Id
XTest <- test %>% dplyr::select(-Id)
# Chunk 4: dataFirstViewInput
XTrain %>% dplyr::glimpse()
XTrain %>% summary()
# Chunk 5: dataFirstViewOutput
YTrain %>% summary()
plotly::plot_ly(x = YTrain) %>%
plotly::add_histogram()
plotly::plot_ly(y = YTrain, type = "box", boxpoints = "all", jitter = 0.5,
pointpos = -1.8)
plotly::plot_ly(x = 1:length(YTrain), y = sort(YTrain)) %>%
plotly::add_lines() %>%
plotly::add_markers()
# Chunk 6
trainMissingData <- XTrain %>%
dplyr::mutate_all(is.na) %>%
dplyr::summarise_all(dplyr::funs(sum)) %>%
tidyr::gather(Var, NaCountTrain) %>%
dplyr::arrange(dplyr::desc(NaCountTrain)) %>%
dplyr::filter(NaCountTrain > 0)
testMissingData <- XTest %>%
dplyr::mutate_all(is.na) %>%
dplyr::summarise_all(sum) %>%
tidyr::gather(Var, NaCountTest) %>%
dplyr::arrange(dplyr::desc(NaCountTest)) %>%
dplyr::filter(NaCountTest > 0)
nTrainningObs <- nrow(XTrain)
nTestObs <- nrow(XTest)
missingResultTable <- trainMissingData %>%
dplyr::full_join(testMissingData, by = 'Var') %>%
dplyr::mutate(NaCountTrainPerc = 100 * round(NaCountTrain / nTrainningObs, 4),
NaCountTestPerc = 100 * round(NaCountTest / nTestObs, 4))
missingResultTable
# Chunk 7: vizMissingData
missingDataColNames <- missingResultTable$Var
XTrain %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
data.frame() %>%
Amelia::missmap(col = c("black", "grey"))
XTest %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
data.frame() %>%
Amelia::missmap(col = c("black", "grey"))
# Chunk 8: vizMissingData2
missingDataColNames <- missingResultTable$Var[1:6]
p <- XTrain %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
tidyr::gather(Var, Val) %>%
dplyr::filter(!is.na(Val)) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = (Val - mean(Val))/sd(Val) ) %>%
dplyr::ungroup() %>%
ggplot2::ggplot(aes(x = Var, fill = Var, color = Var, y = Val))
plotly::ggplotly(p + ggplot2::geom_boxplot())
plotly::ggplotly(p + ggplot2::geom_point())
p <- XTest %>%
dplyr::select( dplyr::one_of(missingDataColNames) ) %>%
tidyr::gather(Var, Val) %>%
dplyr::filter(!is.na(Val)) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = (Val - mean(Val))/sd(Val) ) %>%
dplyr::ungroup() %>%
ggplot2::ggplot(aes(x = Var, fill = Var, color = Var, y = Val))
plotly::ggplotly(p + ggplot2::geom_boxplot())
plotly::ggplotly(p + ggplot2::geom_point())
# Chunk 9
NAToZeroVars <- missingResultTable %>%
dplyr::filter(NaCountTrainPerc > 20.0) %>%
dplyr::select(Var) %>%
unlist() %>% as.character()
NNImputationVars <- missingResultTable %>%
dplyr::filter(NaCountTrainPerc < 20.0) %>%
dplyr::select(Var) %>%
unlist() %>% as.character()
preProcessNAs <- function(Data, NAToZeroVars, NNImputationVars){
auxColNames <- names(Data) %>% base::setdiff( c(NAToZeroVars, NNImputationVars ) )
auxData <- Data %>%
dplyr::select_( .dots = auxColNames )
NAToZeroData <- Data %>%
dplyr::select_(.dots = NAToZeroVars) %>%
dplyr::mutate_all( dplyr::funs( ifelse(is.na(.), 0, .) )
)
NNImputationData <- Data %>%
dplyr::select_(.dots = NNImputationVars) %>%
data.frame() %>%
DMwR::knnImputation(k = 10)
dplyr::bind_cols(auxData, NAToZeroData, NNImputationData) %>%
data.frame()
}
XTrain <- XTrain %>%
preProcessNAs(NAToZeroVars = NAToZeroVars, NNImputationVars = NNImputationVars)
XTest <- XTest %>%
preProcessNAs(NAToZeroVars = NAToZeroVars, NNImputationVars = NNImputationVars)
# Chunk 10
p <- XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = ( Val - min(Val) ) / ( max(Val) - min(Val) ) ) %>%
dplyr::ungroup() %>%
data.frame() %>%
ggplot2::ggplot(aes(x = Var, y = Val)) +
ggplot2::geom_point()
p
# Chunk 11
XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
unique() %>%
dplyr::group_by(Var) %>%
dplyr::summarise(UniqueValuesCount = n()) %>%
dplyr::arrange(UniqueValuesCount) %>%
data.frame()
# Chunk 12
XTrain <- XTrain %>% dplyr::select(-V37)
XTest <- XTest %>% dplyr::select(-V37)
# Chunk 13
p <- XTrain %>%
tidyr::gather(key = Var, value = Val) %>%
dplyr::group_by(Var) %>%
dplyr::mutate(Val = ( Val - min(Val) ) / ( max(Val) - min(Val) ) ) %>%
dplyr::ungroup() %>%
data.frame() %>%
ggplot2::ggplot(aes(x = Var, y = Val)) +
ggplot2::geom_boxplot() +
ggplot2::coord_flip()
p
# Chunk 14
preProcessScaleAndCenter <- function(Data){
Data %>%
dplyr::mutate_all( dplyr::funs( ( . - min(.) ) / ( max(.) - min(.) ) ) )
}
XTrain <- XTrain %>% preProcessScaleAndCenter()
XTest <- XTest %>% preProcessScaleAndCenter()
# Chunk 15
PCAModel <- prcomp(x = XTrain %>% data.matrix())
auxPCAData <- summary(PCAModel)$importance %>%
t() %>%
data.frame() %>%
tibble::rownames_to_column(var = "Component") %>%
dplyr::mutate(Component = factor(x = Component,
levels = Component %>% as.character()))
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Standard.deviation)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Proportion.of.Variance)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
p <- auxPCAData %>%
ggplot2::ggplot(aes(x = Component, y = Cumulative.Proportion)) +
ggplot2::geom_bar(stat = 'identity')
plotly::ggplotly(p = p)
write_csv(x = XTrain, path = 'data/processedTrainData.csv')
?write_csv
readr::write_csv(x = XTest, path = 'data/processedTestData.csv')
readr::write_csv(x = YTrain, path = 'data/TrainLabels.csv')
data.frame(YTrain)
readr::write_csv(x = YTrain %>% data.frame(), path = 'data/TrainLabels.csv')
