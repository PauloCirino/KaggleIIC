{
    "collab_server" : "",
    "contents" : "source('xgboostPreparation.R')\n\nTS <- as.numeric(Sys.time())\nset.seed(TS)\n\nSAVE_EACH_MINS <- 30\n\nbooster <- 'gbtree'\nnrounds <- 10000\nprint_every_n <- 100\nearly_stopping_rounds <- 500\nnfold <- 30\nobjective <- \"reg:linear\"\nmetrics <- \"rmse\"\nsilent <- 0\nnthread <- 1\neta <- c(0.2, 0.1, 0.05, 0.01)\nmin_child_weight <- c(1, 2, 5, 10, 20, 25)\nmax_depth <- c(2, 4, 6, 8, 10)\ngamma <- c(0, 2, 5, 10)\nmax_delta_step <- c(0) \nsubsample <- c(0.5, 0.75, 1)\ncolsample_bytree <- c(0.5, 0.75, 1)\ncolsample_bylevel <- c(0.5, 0.75, 1)\n\nparamTable <- expand.grid(booster = booster,\n                          nrounds = nrounds,\n                          print_every_n = print_every_n,\n                          early_stopping_rounds = early_stopping_rounds,\n                          nfold = nfold,\n                          objective = objective,\n                          metrics = metrics,\n                          silent = silent, \n                          nthread = nthread, \n                          eta = eta, \n                          min_child_weight = min_child_weight, \n                          max_depth = max_depth,\n                          gamma = gamma,\n                          max_delta_step = max_delta_step, \n                          subsample = subsample, \n                          colsample_bytree = colsample_bytree,\n                          colsample_bylevel = colsample_bylevel)\n\ncallingOrder <- sample(nrow(paramTable))\n\n\nresultList <- list()\nlastSavedTime <- 0\nfor (paramIndex in callingOrder){\n    iterParams <- paramTable[paramIndex, ]\n    params <- list(booster = iterParams$booster,\n                   objective = iterParams$objective,\n                   silent = iterParams$silent, \n                   nthread = iterParams$nthread,\n                   eta = iterParams$eta,\n                   gamma= iterParams$gamma,\n                   max_depth = iterParams$max_depth,\n                   min_child_weight = iterParams$min_child_weight,\n                   subsample = iterParams$subsample,\n                   colsample_bytree = iterParams$colsample_bytree,\n                   print_every_n = iterParams$print_every_n,\n                   max_delta_step = iterParams$max_delta_step,\n                   colsample_bylevel = colsample_bylevel )\n    \n    cv <- xgb.cv(params = params,\n                 data = trainData,\n                 nrounds = iterParams$nrounds,\n                 nfold = iterParams$nfold,\n                 metrics = iterParams$metrics,\n                 early_stopping_rounds = iterParams$early_stopping_rounds,\n                 maximize = FALSE)\n    \n    lastIter <- cv$niter\n    endTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[lastIter]\n    endTrainRMSEStd <- cv$evaluation_log$train_rmse_std[lastIter]\n    endTestRMSEMean <-cv$evaluation_log$test_rmse_mean[lastIter]\n    endTestRMSEStd <- cv$evaluation_log$test_rmse_std[lastIter]\n    \n    bestIter <- cv$best_iteration\n    bestNTrees <- cv$best_ntreelimit\n    bestTrainRMSEMean <-cv$evaluation_log$train_rmse_mean[bestIter]\n    bestTrainRMSEStd <- cv$evaluation_log$train_rmse_std[bestIter]\n    bestTestRMSEMean <-cv$evaluation_log$test_rmse_mean[bestIter]\n    bestTestRMSEStd <- cv$evaluation_log$test_rmse_std[bestIter]\n\n    result <- list(params = params,\n                   lastIterList = list( lastIter = lastIter,\n                                        endTrainRMSEMean = endTrainRMSEMean,\n                                        endTrainRMSEStd = endTrainRMSEStd,\n                                        endTestRMSEMean = endTestRMSEMean,\n                                        endTestRMSEStd = endTestRMSEStd ),\n                   \n                   bestIterList = list( bestIter = bestIter,\n                                        bestNTrees = bestNTrees,\n                                        bestTrainRMSEMean = bestTrainRMSEMean,\n                                        bestTrainRMSEStd = bestTrainRMSEStd,\n                                        bestTestRMSEMean = bestTestRMSEMean,\n                                        bestTestRMSEStd = bestTestRMSEStd)\n                   )\n    \n    resultList <- append(resultList, result)\n    \n    if ( (as.numeric(Sys.time()) - lastSavedTime) > SAVE_EACH_MINS ){\n        save(resultList, file = paste('data/resultList_', TS, '.RDA', sep = ''))\n    }\n}",
    "created" : 1498133103883.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "728124814",
    "id" : "38242117",
    "lastKnownWriteTime" : 1498151692,
    "last_content_update" : 1498151692249,
    "path" : "~/Downloads/Kaggle/callScripXGBoost.R",
    "project_path" : "callScripXGBoost.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}